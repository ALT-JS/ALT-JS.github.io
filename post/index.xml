<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | JiashenDu Homepage</title>
    <link>https://alt-js.github.io/post/</link>
      <atom:link href="https://alt-js.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sun, 09 Mar 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://alt-js.github.io/media/icon_hu49328279b356d807a3fbed97c60db0cd_36689_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://alt-js.github.io/post/</link>
    </image>
    
    <item>
      <title>COMPSCI 280 Project2: Flow Matching</title>
      <link>https://alt-js.github.io/post/280pj2/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://alt-js.github.io/post/280pj2/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;You will train your own flow matching model on MNIST.&lt;/p&gt;
&lt;h2 id=&#34;part-1-training-a-single-step-denoising-unet&#34;&gt;Part 1: Training a Single-Step Denoising UNet&lt;/h2&gt;
&lt;h3 id=&#34;unconditioned-unet-architecture&#34;&gt;Unconditioned UNet architecture&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://cal-cs180.github.io/fa24/hw/proj5/assets/unconditional_arch.png&#34; alt=&#34;fig1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://cal-cs180.github.io/fa24/hw/proj5/assets/atomic_ops_new.png&#34; alt=&#34;fig2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;visualization-of-the-noising-process&#34;&gt;Visualization of the noising process&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/14/VapRt2jWhLcIC5m.png&#34; alt=&#34;fig3.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;training-loss-curve&#34;&gt;Training loss curve&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/14/Xo6LJGaAh3bKsNF.png&#34; alt=&#34;fig4.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sample-results-on-the-test-set-after-the-first-and-the-5-th-epoch&#34;&gt;Sample results on the test set after the first and the 5-th epoch&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/14/1JgCnLkd5ZFaTeu.png&#34; alt=&#34;fig5.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/14/7K12zJM4ox6Icm8.png&#34; alt=&#34;fig6.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sample-results-on-the-test-set-with-out-of-distribution-noise-levels-after-the-model-is-trained&#34;&gt;Sample results on the test set with out-of-distribution noise levels after the model is trained.&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/13/tzSuKb4QPysqL7A.png&#34; alt=&#34;fig7.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sample-results-on-the-test-set-with-pure-noise&#34;&gt;Sample results on the test set with pure noise&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/13/2v94YdzxhlALSi7.png&#34; alt=&#34;fig8.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;average-image-of-the-training-set&#34;&gt;Average image of the training set&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/13/kI5rCa3uQsLbUoR.png&#34; alt=&#34;fig9.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

The average MNIST image is blurry and lacks clear digits, showing general intensity distributions. The denoised results, however, retain distinct shapes, indicating that it is doing denoising.&lt;/p&gt;
&lt;h2 id=&#34;part-2-training-a-flow-matching-model&#34;&gt;Part 2: Training a Flow Matching Model&lt;/h2&gt;
&lt;h3 id=&#34;training-loss-curve-plot-for-the-time-conditioned-unet-over-the-whole-training-process&#34;&gt;Training loss curve plot for the time-conditioned UNet over the whole training process&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/14/HaQGujkX1vgocIb.png&#34; alt=&#34;fig10_tunet.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sampling-results-for-the-time-conditioned-unet-for-5-and-10-epochs&#34;&gt;Sampling results for the time-conditioned UNet for 5 and 10 epochs&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/14/JPRa2lU9YkINCFo.png&#34; alt=&#34;tunet_sample.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;training-loss-curve-plot-for-the-class-conditioned-unet-over-the-whole-training-process&#34;&gt;Training loss curve plot for the class-conditioned UNet over the whole training process&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/14/dxosKPJYICX9Tki.png&#34; alt=&#34;fig10_cunet.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sampling-results-for-the-class-conditioned-unet-for-5-and-10-epochs&#34;&gt;Sampling results for the class-conditioned UNet for 5 and 10 epochs&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/14/62mLjKZDs7nkih5.png&#34; alt=&#34;cunet_sample.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>COMPSCI 184 Project3: PathTracer</title>
      <link>https://alt-js.github.io/post/184pj3/</link>
      <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://alt-js.github.io/post/184pj3/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/eHbOGFcswjBzxDa.png&#34; alt=&#34;dragon_64_32.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;part-0-project-overview&#34;&gt;Part 0: Project overview&lt;/h2&gt;
&lt;p&gt;In this project, I implemented some fundamental functions and features of a physically-based renderer using path tracing algorithm. First, I implemented ray generation and the intersection between ray and objects/scene. Next, I implemented the BVH splitting and intersection detection. Then, I implemented direct illumination(zero/one bounce lights) and global illumination(multi-bounce lights w/ w/o russian roullete) to actually render the whole scene with path tracing. Finally, I implemented adaptive sampling to reduce the noise of monte carlo path tracing.&lt;/p&gt;
&lt;h2 id=&#34;part-1-ray-generation-and-scene-intersection&#34;&gt;Part 1: Ray Generation and Scene Intersection&lt;/h2&gt;
&lt;h3 id=&#34;ray-generation-walkthrough--primitive-intersection-pipeline&#34;&gt;Ray generation walkthrough &amp;amp; primitive intersection pipeline&lt;/h3&gt;
&lt;p&gt;I first calculate the bottom left and the top right corner of the sensor/image space coordinates, which helps me to determine the coordinates in the camera space with left multiplcation of the &lt;code&gt;c2w&lt;/code&gt; matrix. Then with the origin &lt;code&gt;pos&lt;/code&gt; and the previously calculated coord as &lt;code&gt;direction&lt;/code&gt; vector(since the origin is [0,0,0] and it&amp;rsquo;s numerically the same for the coords and the vector), we can generate the correct ray.&lt;/p&gt;
&lt;p&gt;Primitive is the bridge between geometry processing and the shading subsystem. It contains all the things including &lt;code&gt;bbox&lt;/code&gt;, &lt;code&gt;intersect&lt;/code&gt;, &lt;code&gt;has_intersection&lt;/code&gt; and &lt;code&gt;bsdf&lt;/code&gt;. For intersections, we use &lt;code&gt;has_intersection&lt;/code&gt; to determine whether it&amp;rsquo;s intersected or not and use &lt;code&gt;intersect&lt;/code&gt; to actually change the intersection distance, the normal vector, and the bsdf.&lt;/p&gt;
&lt;h3 id=&#34;triangle-intersection-algorithm-walkthrough&#34;&gt;Triangle intersection algorithm walkthrough&lt;/h3&gt;
&lt;p&gt;For the &lt;code&gt;intersect&lt;/code&gt; and &lt;code&gt;has_intersection&lt;/code&gt;, I used the Moller-Trumbore algorithm to compute them. We compute two edges of the triangle. Compute the determinant &lt;code&gt;det&lt;/code&gt; to check if the ray is nearly parallel. Compute u and v(barycentric coordinates) to ensure the intersection lies within the triangle. Compute t, the intersection distance along the ray. And finally check if t is within the ray&amp;rsquo;s valid range (min_t to max_t). The function &lt;code&gt;intersect&lt;/code&gt; basically determine whether &lt;code&gt;has_intersection&lt;/code&gt; is true or not and change the primitives and the properties mentioned above(intersection distance, normal vector, bsdf).&lt;/p&gt;
&lt;h3 id=&#34;some-results&#34;&gt;Some results&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/PSxngs9r1DGBQvh.png&#34; alt=&#34;1-CBspheres.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/ahoUQ67VMJ8Hnm5.png&#34; alt=&#34;1-cow.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CB spheres&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;cow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;part-2-bounding-volume-hierarchy&#34;&gt;Part 2: Bounding Volume Hierarchy&lt;/h2&gt;
&lt;h3 id=&#34;bvh-construction-algorithm-walkthrough&#34;&gt;BVH construction algorithm walkthrough&lt;/h3&gt;
&lt;p&gt;First, compute the bounding box (BBox) of all primitives in the given range [start, end). Then, I choose the best axis to split: compute the bounding box centroid for each primitive. Select the axis with the largest extent (X, Y, or Z) and split at the centroid median to achieve balanced partitions. The primitives are sorted first and partitioned into left and right subsets. Finally, recursively call function and construct BVH for left and right subsets and return the newly created BVHNode.&lt;/p&gt;
&lt;h3 id=&#34;some-results-1&#34;&gt;Some results&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/hsbaMc4D8Z1iKzq.png&#34; alt=&#34;2-cblucy.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/h2aK4RpOl9yntiw.png&#34; alt=&#34;2-max.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CB Lucy&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Max Planck&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;more-on-bvh-acceleration&#34;&gt;More on BVH acceleration&lt;/h3&gt;
&lt;p&gt;First, here&amp;rsquo;s more result on the BVH rendering(left) and the comparison between the non-BVH. You can see that there&amp;rsquo;s basically no difference between them.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/L7pVYQdUeayEkjW.png&#34; alt=&#34;2-peter.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/sKw7S8VnQ9bU3k2.png&#34; alt=&#34;2slow-peter.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Peter w/ BVH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Peter w/o BVH&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;But the rendering time, as shown in the picture below, have significant difference. One is 0.0653 second, and the other takes 166.5520 seconds to finish. Nearly 300x faster.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/mGnP5FgaLyU4qWM.png&#34; alt=&#34;2-peterspeed.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;part-3-direct-illumination&#34;&gt;Part 3: Direct Illumination&lt;/h2&gt;
&lt;h3 id=&#34;direct-lighting-functions-walkthrough&#34;&gt;Direct Lighting functions walkthrough&lt;/h3&gt;
&lt;h4 id=&#34;uniform-hemisphere-sampling&#34;&gt;Uniform Hemisphere Sampling&lt;/h4&gt;
&lt;p&gt;In the loop of &lt;code&gt;num_sample&lt;/code&gt; samples, we sample from &lt;code&gt;hemisphereSampler&lt;/code&gt;, then we create a new ray with in point &lt;code&gt;hit_p&lt;/code&gt; and the epsilon constant for avoiding numerical presision issues and direction sampled earlier. If the ray intersects we calculate the &lt;code&gt;L_out&lt;/code&gt; of the ray. Finally we divide the sum of all the things above with pdf and the &lt;code&gt;num_samples&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;importance-sampling-lights&#34;&gt;Importance Sampling Lights&lt;/h4&gt;
&lt;p&gt;FOr importance sampling, we sample all the lights directly After we calculate the hit point &lt;code&gt;hit_p&lt;/code&gt;, we directly sample a light ray from it. If we cast a ray in this direction and there is no other object between the hit point and the light source, then we know that this light source does cast light onto the hit point. After the judge, we still do the same thing as above(divide the sum of all the things above with pdf and the &lt;code&gt;num_samples&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;some-results-2&#34;&gt;Some results&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/dcW1BYZT6Jpvswl.png&#34; alt=&#34;3H-bunny_64_32.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/uhZSVJynjMpz6UK.png&#34; alt=&#34;3-bunny_64_32.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Hemisphere uniform sampling&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Direct importance sampling&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/sbQr1iKAhxGZSg7.png&#34; alt=&#34;3H-dragon_32_16.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/olEq7FRBQMzStYb.png&#34; alt=&#34;3-dragon_32_16.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Hemisphere uniform sampling&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Direct importance sampling&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;direct-comparison&#34;&gt;Direct comparison&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/pd3KXycOaBsR8Eo.png&#34; alt=&#34;3-1-bunny_64_32.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/ORMdsz56EyBwQFS.png&#34; alt=&#34;3-4-bunny_64_32.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/wuqkp8aj7XcZ3PR.png&#34; alt=&#34;3-16-bunny_64_32.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/5exniCTFvOcGjm9.png&#34; alt=&#34;3-64-bunny_64_32.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Up 1 Down 16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Up 4 Down 64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Uniform hemisphere sampling distributes samples evenly over the hemisphere, leading to significant variance in Monte Carlo integration when evaluating lighting contributions, especially in scenes with strong directional lighting. This results in more noise and slower convergence. In contrast, importance sampling strategically places more samples in directions where the light source contributes most to the radiance, reducing variance and improving efficiency. This method converges faster, producing smoother and more accurate results with fewer samples.&lt;/p&gt;
&lt;h2 id=&#34;part-4-global-illumination&#34;&gt;Part 4: Global Illumination&lt;/h2&gt;
&lt;h3 id=&#34;indirect-lighting-function-walkthough&#34;&gt;Indirect lighting function walkthough&lt;/h3&gt;
&lt;p&gt;We get the one bounce radiance first, then, we sample a new f using the outgoing direction of the last ray. We create new ray and increase its depth by 1. When the depth reaches the max depth, just return the one bounce result earlier(this is the last one being calculated), otherwise recursively calling the function.&lt;/p&gt;
&lt;p&gt;As for russian roulette, the difference is that every new ray generated each turn has to pass the russian roulette coin flip check in order to not be eliminated and thrown away. The probability I&amp;rsquo;m using here is 70% continue, 30% delete each turn.&lt;/p&gt;
&lt;h3 id=&#34;some-global-illumination-results&#34;&gt;Some global illumination results&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/D4Ye7gfVZy5TcUq.png&#34; alt=&#34;4-bunny_1024_8_2.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/bfBkY6LQGyCnXAZ.png&#34; alt=&#34;4-spheres_1024_8_4.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bunny (maxdepth=2)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Spheres (maxdepth=4)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;only-direct-illumination-vs-only-indirect-illumination&#34;&gt;Only direct illumination vs. only indirect illumination&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/17/QzaAcpTOljU9CMK.png&#34; alt=&#34;4-spheres_1024_8_1.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/4fCLUGcaYm8dwqI.png&#34; alt=&#34;4-spheres_1024_8_2onlyi.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;only direct illumination&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;only indirect illumination (maxdepth=2)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;renders-of-max_ray_depth-from-0-to-5&#34;&gt;Renders of &lt;code&gt;max_ray_depth&lt;/code&gt; from 0 to 5&lt;/h3&gt;
&lt;p&gt;specs using: &lt;code&gt;-t 12 -s 1024 -l 8 -r 480 360&lt;/code&gt;, click the image to zoom in on the website.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;isAccumBounces&lt;/th&gt;
&lt;th&gt;m = 0&lt;/th&gt;
&lt;th&gt;m = 1&lt;/th&gt;
&lt;th&gt;m = 2&lt;/th&gt;
&lt;th&gt;m = 3&lt;/th&gt;
&lt;th&gt;m = 4&lt;/th&gt;
&lt;th&gt;m = 5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/cGERHpAguQeCFLI.png&#34; alt=&#34;CB_Bunny_0.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/IYqgA2rjBJsduiV.png&#34; alt=&#34;CB_Bunny_1.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/OnDZbmFq9UihCgL.png&#34; alt=&#34;CB_Bunny_2.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/sqfh6ZUnmKetLET.png&#34; alt=&#34;CB_Bunny_3.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/r1iAbHDxV48nmp3.png&#34; alt=&#34;CB_Bunny_4.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/8X7aYmyHVGTpEQs.png&#34; alt=&#34;CB_Bunny_5.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/bvizX7BDAYJN89T.png&#34; alt=&#34;CB_Bunny_cumsum_0.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/VjzShtWMLb7gIQy.png&#34; alt=&#34;CB_Bunny_cumsum_1.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/3WxsAPvbGEq6HNL.png&#34; alt=&#34;CB_Bunny_cumsum_2.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/LeQf9sqC3vta2hG.png&#34; alt=&#34;CB_Bunny_cumsum_3.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/epknVAIzZwdN2Ly.png&#34; alt=&#34;CB_Bunny_cumsum_4.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/ts5jVlDz1NhGSZF.png&#34; alt=&#34;CB_Bunny_cumsum_5.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;the-2nd-and-3rd-bounce-of-light&#34;&gt;the 2nd and 3rd bounce of light&lt;/h4&gt;
&lt;p&gt;For the 2nd bounce of the light, its main contribution is that it illuminates the ceiling, making the overall rasterization way more realistic. For the third bounce of light, it slightly illuminates the ground around the bunny, mimicing the lights reflected away from the bunny surface, making the overall rasterization more realistic.&lt;/p&gt;
&lt;h3 id=&#34;russian-roulette-rendering-results&#34;&gt;Russian roulette rendering results&lt;/h3&gt;
&lt;p&gt;specs using: &lt;code&gt;-s 1024 -l 4&lt;/code&gt;. Along with using russian soulette, you may not be able to see that much difference after 2 bounce.&lt;/p&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;title&gt;Flexbox&lt;/title&gt;
    &lt;style&gt;
        .container1 {
            display: flex;
            justify-content: space-between; /* 图片之间有间距 */
            align-items: center;
            gap: 10px; /* 图片间距 */
        }
        .container1 img {
            width: 100px; /* 设定图片宽度 */
            height: auto; /* 保持宽高比 */
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&#34;container1&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/ter3DLVmPMNxOHU.png&#34; alt=&#34;图片1&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/4bXiQIOSD6k2h9G.png&#34; alt=&#34;图片2&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/f2LITNAPtaVv6QO.png&#34; alt=&#34;图片3&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/y4ZuJkjoRhrLM5e.png&#34; alt=&#34;图片4&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/8PTfcBJsKSzVAYa.png&#34; alt=&#34;图片5&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/ys6JOa3PBA4E7Zo.png&#34; alt=&#34;图片5&#34;&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;h3 id=&#34;various-sample-per-pixel-rates-results&#34;&gt;Various sample-per-pixel rates results&lt;/h3&gt;
&lt;p&gt;From left to right, from top to bottom: 1 2 4 8 16 64 1024.&lt;/p&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;title&gt;Flexbox&lt;/title&gt;
    &lt;style&gt;
        .container2 {
            display: flex;
            justify-content: space-between; /* 图片之间有间距 */
            align-items: center;
            gap: 10px; /* 图片间距 */
        }
        .container2 img {
            width: 150px; /* 设定图片宽度 */
            height: auto; /* 保持宽高比 */
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&#34;container2&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/fHB89v74NbV1RAe.png&#34; alt=&#34;图片1&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/a7iHhyqIOwczQ3C.png&#34; alt=&#34;图片2&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/IZNlfs51XEhi8Pe.png&#34; alt=&#34;图片3&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/DGeFtJuWlV6I9Sd.png&#34; alt=&#34;图片4&#34;&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;title&gt;Flexbox&lt;/title&gt;
    &lt;style&gt;
        .container3 {
            display: flex;
            justify-content: space-between; /* 图片之间有间距 */
            align-items: center;
            gap: 10px; /* 图片间距 */
        }
        .container3 img {
            width: 200px; /* 设定图片宽度 */
            height: auto; /* 保持宽高比 */
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&#34;container3&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/tdysICTwuG6kzU1.png&#34; alt=&#34;图片1&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/gn7KfalOB6sDwiJ.png&#34; alt=&#34;图片2&#34;&gt;
        &lt;img src=&#34;https://s2.loli.net/2025/03/18/nhL8oIT5qeFlKXN.png&#34; alt=&#34;图片3&#34;&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;h2 id=&#34;part-5-adaptive-sampling&#34;&gt;Part 5: Adaptive Sampling&lt;/h2&gt;
&lt;h3 id=&#34;adaptive-sampling-walkthrough&#34;&gt;Adaptive sampling walkthrough&lt;/h3&gt;
&lt;p&gt;Adaptive sampling is a method used in ray tracing to reduce the number of samples per pixel while maintaining image quality. Instead of taking a fixed number of samples (ns_aa), it dynamically decides when to stop sampling based on statistical analysis.&lt;/p&gt;
&lt;p&gt;(If only one sample is requested, the algorithm traces a single ray and directly stores the computed radiance.) We loop over &lt;code&gt;ns_aa&lt;/code&gt; samples, and only check after every &lt;code&gt;samplesPerBatch&lt;/code&gt; samples. Then we calculate and check confidence interval &lt;code&gt;I&lt;/code&gt; is smaller or larger than a threshold, if smaller then it stops early. otherwise just like ordinary calculation. Once sampling is complete (either because the pixel converged or the maximum samples were taken), the final radiance is computed as the average of all collected samples.&lt;/p&gt;
&lt;h3 id=&#34;some-results-3&#34;&gt;Some results&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/SIEatGOiRCykVZY.png&#34; alt=&#34;5-bunny.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/Jy58qPUbscnmpvN.png&#34; alt=&#34;5-bunnyrate.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bunny&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bunnyrate&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/hwvjBs8Wyx4Dk2G.png&#34; alt=&#34;5-ball.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/18/3SGViozB81c6rlH.png&#34; alt=&#34;5-ballrate.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ball&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ballrate&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>COMPSCI 184 Project2: Geometric Modeling</title>
      <link>https://alt-js.github.io/post/184pj2/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://alt-js.github.io/post/184pj2/</guid>
      <description>&lt;h2 id=&#34;part-0-project-overview&#34;&gt;Part 0: Project overview&lt;/h2&gt;
&lt;p&gt;This homework focuses on implementing fundamental operations related to Bezier curves, Bezier patches, mesh manipulation, and Loop subdivision. In this project, we started out from the basic Bezier curve and de Casteljau algorithm, and extend it to 2D surfaces. We also made a fully functional mesh &amp;ldquo;editor&amp;rdquo; that does edge flipping, edge splitting and mesh upsampling. The most challenging parts were ensuring correct pointer assignments in the edge splitting and properly handling &lt;code&gt;newEdge&lt;/code&gt; in Loop subdivision.&lt;/p&gt;
&lt;h1 id=&#34;section-1-bezier-curves-and-surfaces&#34;&gt;Section 1: Bezier Curves and Surfaces&lt;/h1&gt;
&lt;h2 id=&#34;part-1-bezier-curves-with-1d-de-casteljau-subdivision&#34;&gt;Part 1: Bezier Curves with 1D de Casteljau Subdivision&lt;/h2&gt;
&lt;h3 id=&#34;briefly-explain-de-casteljaus-algorithm-and-how-you-implemented-it-in-order-to-evaluate-bezier-curves&#34;&gt;Briefly explain de Casteljau’s algorithm and how you implemented it in order to evaluate Bezier curves.&lt;/h3&gt;
&lt;p&gt;De Casteljau&amp;rsquo;s algorithm is used to determine the point on the Bezier curve of a certain number of points. For $n$ points, we iteratively use linear interpolation to determine $n-1$ points, until we only have one point, which is $p_{\frac{n(n-1)}{2}}$. This particular point will be on the Bezier curve of $p_{0}$ and $p_{n-1}$ from the original $n$ points.&lt;/p&gt;
&lt;p&gt;I wrote a seperate &lt;code&gt;lerp&lt;/code&gt; function and iterate it through all the points. The &lt;code&gt;lerp&lt;/code&gt; function is defined as:



$$\text{lerp}(p_i, p_{i+1}, t) = (1 - t) p_i + t p_{i + 1}$$

The new points generated is the one-step result of all the original points.&lt;/p&gt;
&lt;h3 id=&#34;the-bezier-curve-with-6-control-points&#34;&gt;The Bezier curve with 6 control points&lt;/h3&gt;
&lt;p&gt;The six pictures below shows the 5 steps of evaluation of the original 6 control points and the final bezier of the points.&lt;/p&gt;
&lt;div style=&#34;display: grid; grid-template-columns: repeat(2, 2fr); gap: 10px;&#34;&gt;
    &lt;img src=&#34;https://s2.loli.net/2025/02/27/piCm81GaKkMHJDt.png&#34; width=&#34;300&#34;&gt;
    &lt;img src=&#34;https://s2.loli.net/2025/02/27/wkpT9gBd8HcjNEI.png&#34; width=&#34;300&#34;&gt;
    &lt;img src=&#34;https://s2.loli.net/2025/02/27/fIQkrm3ZJBbVzWE.png&#34; width=&#34;300&#34;&gt;
    &lt;img src=&#34;https://s2.loli.net/2025/02/27/3SFZzB69aqbUkuW.png&#34; width=&#34;300&#34;&gt;
    &lt;img src=&#34;https://s2.loli.net/2025/02/27/OAn197glD8jyLNY.png&#34; width=&#34;300&#34;&gt;
    &lt;img src=&#34;https://s2.loli.net/2025/02/27/wixVUPGJHTMAmCo.png&#34; width=&#34;300&#34;&gt;
&lt;/div&gt;
&lt;p&gt;In this picture I changed the position of the points and the $t$ value.


















&lt;figure  id=&#34;figure-a-slightly-different-bezier-curve&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/02/27/dWjQbgScHh7a3PX.png&#34; alt=&#34;A slightly different Bezier curve&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      A slightly different Bezier curve
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;part-2-bezier-surfaces-with-separable-1d-de-casteljau&#34;&gt;Part 2: Bezier Surfaces with Separable 1D de Casteljau&lt;/h2&gt;
&lt;h3 id=&#34;briefly-explain-how-de-casteljau-algorithm-extends-to-bezier-surfaces-and-how-you-implemented-it-in-order-to-evaluate-bezier-surfaces&#34;&gt;Briefly explain how de Casteljau algorithm extends to Bezier surfaces and how you implemented it in order to evaluate Bezier surfaces.&lt;/h3&gt;
&lt;p&gt;The de Casteljau&amp;rsquo;s algorithm naturally extends to Bezier surfaces by applying the same interpolation process in two directions $u$ and $v$. For each row of control points $P(i,j)$, apply the de Casteljau algorithm recursively to compute an intermediate set of points at parameter $u$, reducing the row into a single point. Once you have the intermediate points from the previous step, apply de Casteljau along the $v$-direction to interpolate these points and obtain the final surface point $S(u,v)$.&lt;/p&gt;
&lt;p&gt;I modified the &lt;code&gt;lerp&lt;/code&gt; function to make it accept &lt;code&gt;Vector3D&lt;/code&gt; inputs and outputs, and the &lt;code&gt;evaluate&lt;/code&gt; process is just call &lt;code&gt;evaluate1D&lt;/code&gt; on controlPoints, and return with the results of the previous loop being run in the &lt;code&gt;evaluate1D&lt;/code&gt; again but with a different interpolation parameter. The &lt;code&gt;evaluate1D&lt;/code&gt; function also loops through points with &lt;code&gt;evaluateStep&lt;/code&gt; but only returns the 0-th dimension of the result.&lt;/p&gt;
&lt;h3 id=&#34;the-teapot-result&#34;&gt;The teapot result&lt;/h3&gt;


















&lt;figure  id=&#34;figure-the-screenshot-of-bezteapotbez-evaluated-by-my-implementation&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/02/27/HfmGqn4UWvBTpbP.png&#34; alt=&#34;the screenshot of `bez/teapot.bez` evaluated by my implementation&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      the screenshot of &lt;code&gt;bez/teapot.bez&lt;/code&gt; evaluated by my implementation
    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&#34;part-3-area-weighted-vertex-normals&#34;&gt;Part 3: Area-Weighted Vertex Normals&lt;/h2&gt;
&lt;h3 id=&#34;briefly-explain-how-you-implemented-the-area-weighted-vertex-normals&#34;&gt;Briefly explain how you implemented the area-weighted vertex normals.&lt;/h3&gt;
&lt;p&gt;Started with one halfedge, we iterate through every halfedge. For every halfedge, we extract the previous, current, next vertex position, and calculate the cross product of vectors defined by current and next vertex and current and previous vertex. We add up all the cross products and restore it to unit vector as the output.&lt;/p&gt;
&lt;h3 id=&#34;the-teapot-result-1&#34;&gt;The teapot result&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/AJwZbInO9fBehc2.png&#34; alt=&#34;3-flat.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/mblVCkjNiun8sXJ.png&#34; alt=&#34;3-phong.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;default flat shading&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Phong shading&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;part-4-edge-flip&#34;&gt;Part 4: Edge Flip&lt;/h2&gt;
&lt;h3 id=&#34;briefly-explain-how-you-implemented-the-edge-flip-operation&#34;&gt;Briefly explain how you implemented the edge flip operation.&lt;/h3&gt;
&lt;p&gt;I first determine every possible element of a unit pair of triangles, then, I changed the relations of every possible related halfedge using &lt;code&gt;setNeighbors&lt;/code&gt; function, and assign the faces and vertices with the correct halfedge in the end. Here&amp;rsquo;s a picture that contains all the notations I&amp;rsquo;m using in my code.


















&lt;figure  id=&#34;figure-flip-edge-draft&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/WrGMPZszA5bd8ap.png&#34; alt=&#34;Flip edge draft&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Flip edge draft
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;the-teapot-result-2&#34;&gt;The teapot result&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/gFQa8CGeAH4lYMD.png&#34; alt=&#34;4-original.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/bNqGmDOSWnVrEh9.png&#34; alt=&#34;4-flipped.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;The original teapot&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;The teapot woth some flipped edges&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;the-freakindebug-journey&#34;&gt;The freakin&amp;rsquo;debug journey&lt;/h3&gt;
&lt;p&gt;From the draft, you probably noticed that I initially wrote the vertex $c$ and $d$ in the wrong place. Because I sticked to my draft so closely, I kept checking the errors in my code, not the draft itself:(.&lt;/p&gt;
&lt;h2 id=&#34;part-5-edge-split&#34;&gt;Part 5: Edge Split&lt;/h2&gt;
&lt;h3 id=&#34;briefly-explain-how-you-implemented-the-edge-split-operation&#34;&gt;Briefly explain how you implemented the edge split operation&lt;/h3&gt;
&lt;p&gt;I first did all the things similar to the &lt;code&gt;filpEdge&lt;/code&gt; function(determine possible elements), then I created new edge, face and halfedges. For the new edgeHere’s a picture that contains all the notations I’m using in my code.


















&lt;figure  id=&#34;figure-split-edge-draft&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/K3AQNaltcrGRmJw.png&#34; alt=&#34;Split edge draft&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Split edge draft
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;some-teapot-result&#34;&gt;Some teapot result&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/3tdvjYxD7clyfSe.png&#34; alt=&#34;5-original.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/hsd3pgJiZX4mkTY.png&#34; alt=&#34;5-split.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/EenLAPbxRMaXrFf.png&#34; alt=&#34;5-splitflip.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;The original teapot&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;The teapot with some split edges&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;The teapot with some splits and filpped edges&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;part-6-loop-subdivision-for-mesh-upsampling&#34;&gt;Part 6: Loop Subdivision for Mesh Upsampling&lt;/h2&gt;
&lt;h3 id=&#34;briefly-explain-how-you-implemented-the-loop-subdivision&#34;&gt;Briefly explain how you implemented the loop subdivision&lt;/h3&gt;
&lt;p&gt;I first compute new positions for all the vertices in the input mesh, using the weighted average formula given in the question. Mark each vertex as being a vertex of the original mesh, and compute the updated vertex positions associated with edges new positions. Then loop through the mesh to split edges and setting new halfedges generated, as well as filp any new edge that connects an old and new vertex to make the mesh more &amp;ldquo;organized&amp;rdquo;. Finally we copy the new vertex positions into &lt;code&gt;Vertex::position&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-meshes-behave-after-loop-subdivision&#34;&gt;How meshes behave after loop subdivision?&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/EcgSYzGNr3Aho2j.png&#34; alt=&#34;6-1.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/cMblmfDSrW1AyGE.png&#34; alt=&#34;6-2.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/pxUJqVXGBuF6vYh.png&#34; alt=&#34;6-3.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/nyoKM7lk3mDSjJF.png&#34; alt=&#34;6-4.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Meshes becomes &amp;ldquo;smoothed out&amp;rdquo; after multiple times of loop subdivisions. Sharp edges and corners become more rounded and less sharper than before.&lt;/p&gt;
&lt;p&gt;Yes, pre-splitting some edges works. Loop subdivision applies a weighted averaging scheme when repositioning vertices. If edges are closely spaced(i.e. pre-splitting to make edges closely spaced / evenly spaced), the averaging effect is localized rather than spread out over a large area, reducing the smoothing effect.&lt;/p&gt;
&lt;h3 id=&#34;the-asymmetric-cube&#34;&gt;The Asymmetric Cube&lt;/h3&gt;
&lt;p&gt;Asymmetry appears after multiple iterations, despite the cube starting with a symmetric structure. This happens due to the cube&amp;rsquo;s original topology, where each face consists of two triangles (not four evenly distributed ones).&lt;/p&gt;
&lt;p&gt;Loop subdivision refines each triangle individually, meaning that if some edges are longer or unevenly split, the algorithm treats them differently and there&amp;rsquo;s asymmetric. The cube&amp;rsquo;s initial triangulation pattern isn&amp;rsquo;t perfectly symmetrical, leading to small &amp;ldquo;drifts&amp;rdquo; after each iteration.&lt;/p&gt;
&lt;p&gt;So, by pre-splitting the cube by adding a &amp;ldquo;cut&amp;rdquo; to each surface(formed by 2 triangles/faces), we are able to get a balanced cube. Because every surface are pre-splitted to be exactly the same and symmetrical, so after subdivision, they still remain the same shape and still be symmetrical on same directions.&lt;/p&gt;


















&lt;figure  id=&#34;figure-the-pre-split-cube&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/nO1Lz28iMFSTbZG.png&#34; alt=&#34;The pre-split cube&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      The pre-split cube
    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Here is a comparison between original cube and the pre-splitted cube after 4 times of subdivisions.(Left: og. Right: pre-splitted.)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/nyoKM7lk3mDSjJF.png&#34; alt=&#34;6-4.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.loli.net/2025/03/01/FAwiQjGgW4HKBJP.png&#34; alt=&#34;6-comparison.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>COMPSCI 184 Project1: The Simple Rasterizer</title>
      <link>https://alt-js.github.io/post/184pj1/</link>
      <pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://alt-js.github.io/post/184pj1/</guid>
      <description>&lt;embed src=&#34;CS184PJ1Writeup.pdf&#34; type=&#34;application/pdf&#34; width=&#34;100%&#34; height=&#34;600px&#34; /&gt;
</description>
    </item>
    
    <item>
      <title>Foundations of Computer Graphics Projects</title>
      <link>https://alt-js.github.io/post/compsci184/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://alt-js.github.io/post/compsci184/</guid>
      <description>&lt;h2 id=&#34;cs-184284a-spring-2025&#34;&gt;CS 184/284A Spring 2025&lt;/h2&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://alt-js.github.io/post/184pj1/&#34;&gt;Project 1: The Simple Rasterizer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://alt-js.github.io/post/184pj2/&#34;&gt;Project 2: Geometric Modeling&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://alt-js.github.io/post/184pj3/&#34;&gt;Project 3: PathTracer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
